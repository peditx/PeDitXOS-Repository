# Workflow to build and deploy OpenWrt packages for the PeDitXOS repository.
# This workflow uses a matrix strategy to build packages for multiple versions and architectures in parallel.

name: Build and Deploy PeDitXOS OpenWrt Packages

# Controls when the action will run.
on:
  # Allows manual run from the Actions tab
  workflow_dispatch:
  # Runs once a week to keep the repository fresh
  schedule:
    - cron: '0 0 * * 0' # Every Sunday at 00:00 UTC

jobs:
  # Job to build packages for multiple versions and targets in parallel
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # **CORRECTED OPENWRT VERSIONS** (Block Style List)
        openwrt_version:
          - 'openwrt-24.10'
          - 'master'
          - 'openwrt-23.05'
          - 'openwrt-22.03'

        # A comprehensive list of 17 major OpenWrt targets. (Block Style List)
        target_subtarget:
          - 'ath79/generic'
          - 'bcm27xx/bcm2711'
          - 'ipq40xx/generic'
          - 'ipq806x/generic'
          - 'ipq807x/generic'
          - 'lantiq/xrx200'
          - 'mediatek/filogic'
          - 'mvebu/cortexa9'
          - 'ramips/mt7621'
          - 'rockchip/armv8'
          - 'sunxi/cortexa7'
          - 'x86/64'
          - 'qualcommax/ipq5018'
          - 'qualcommax/ipq6018'
          - 'qualcommax/ipq8074'
          - 'realtek/generic'
          - 'mediatek/mt7622'
        
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        
      - name: Clone OpenWrt source code
        run: git clone --depth 1 --branch ${{ matrix.openwrt_version }} https://github.com/openwrt/openwrt.git openwrt

      - name: Install dependencies
        run: |
          # Install necessary tools for Python, Libtool (crucial for host tools), and general build process.
          sudo apt-get update
          sudo apt-get install -y subversion libncurses5-dev gawk zlib1g-dev python3-dev python3-setuptools unzip wget libtool python3-pip
          pip3 install pyelftools

      - name: Add custom feeds and generate config
        # **CRITICAL FIX**: This new step corrects the build order.
        run: |
          cd openwrt
          
          # --- Step 1: Add all custom feeds FIRST ---
          echo 'src-git passwall_packages https://github.com/xiaorouji/openwrt-passwall-packages' >> feeds.conf.default
          echo 'src-git passwall_peditx https://github.com/peditx/openwrt-passwall' >> feeds.conf.default
          echo 'src-git passwall2_peditx https://github.com/peditx/openwrt-passwall2' >> feeds.conf.default
          echo 'src-git themeswitch https://github.com/peditx/luci-app-themeswitch' >> feeds.conf.default
          echo 'src-git theme_peditx https://github.com/peditx/luci-theme-peditx' >> feeds.conf.default
          echo 'src-git theme_carbonpx https://github.com/peditx/luci-theme-carbonpx' >> feeds.conf.default
          
          # --- Step 2: Update and install feeds so the build system knows about them ---
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
          # --- Step 3: Create a minimal .config with just the target ---
          TARGET_MAIN="${{ matrix.target_subtarget }}"
          TARGET=$(echo ${TARGET_MAIN} | cut -d '/' -f 1)
          SUBTARGET=$(echo ${TARGET_MAIN} | cut -d '/' -f 2)
          cat > .config << EOF
          CONFIG_TARGET_${TARGET}=y
          CONFIG_TARGET_${TARGET}_${SUBTARGET}=y
          EOF
          
          # --- Step 4: Run 'defconfig' to generate a full, valid config based on the target and available feeds ---
          make defconfig
          
          # --- Step 5: NOW append our custom package selections and signing options to the valid config ---
          cat >> .config << EOF
          CONFIG_DOWNLOAD_FOLDER=/opt/dl
          CONFIG_DEVEL=y
          CONFIG_HAVE_DOT_CONFIG=y
          CONFIG_NO_M4=y
          CONFIG_NO_HASHED_VERSION=y
          CONFIG_TARGET_PREINIT_NO_MTD=y
          CONFIG_CLEAN_IPKG=y
          CONFIG_IPV6=y
          CONFIG_PACKAGE_zlib=y
          CONFIG_SIGNED_PACKAGES=y
          CONFIG_PACKAGE_luci-app-themeswitch=y
          CONFIG_PACKAGE_luci-theme-peditx=y
          CONFIG_PACKAGE_luci-theme-carbonpx=y
          CONFIG_PACKAGE_luci-app-passwall=y
          CONFIG_PACKAGE_luci-app-passwall2=y
          EOF

      - name: Cache OpenWrt Downloads
        uses: actions/cache@v4
        with:
          path: openwrt/dl
          key: ${{ runner.os }}-${{ matrix.openwrt_version }}-dl-${{ hashFiles('openwrt/feeds.conf.default') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.openwrt_version }}-dl-

      - name: Decode usign private key
        run: |
          echo "${{ secrets.USIGN_PRIVATE_KEY }}" | base64 -d > openwrt/signing_key.pem
          echo "CONFIG_SIGNATURE_KEY=\"signing_key.pem\"" >> openwrt/.config

      - name: Download source code
        run: |
          cd openwrt
          make download -j$(nproc)
          
      - name: Cache Host Tools
        uses: actions/cache@v4
        with:
          path: openwrt/staging_dir/host
          key: ${{ runner.os }}-${{ matrix.openwrt_version }}-host-${{ hashFiles('openwrt/.config') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.openwrt_version }}-host-

      - name: Build host tools (usign)
        # This step builds and installs host tools (including usign). It will be skipped if cache is hit.
        run: |
          cd openwrt
          make tools/install -j$(nproc) V=s
          
      - name: Build external packages
        run: |
          cd openwrt
          make package/index V=s

      - name: Organize packages for deployment
        run: |
          TARGET_DIR=$(ls -d openwrt/bin/packages/*/ | head -n 1)
          mkdir -p ./${{ matrix.openwrt_version }}/${{ matrix.target_subtarget }}
          rsync -av ${TARGET_DIR}/* ./${{ matrix.openwrt_version }}/${{ matrix.target_subtarget }}/
          cp ./openwrt/key-build.pub ./${{ matrix.openwrt_version }}/
          
      - name: Upload artifact for deployment
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.openwrt_version }}-${{ matrix.target_subtarget }}
          path: ./${{ matrix.openwrt_version }}
            
  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the deployment branch (repo)
        uses: actions/checkout@v4
        with:
          ref: repo
          fetch-depth: 0

      - name: Download all built packages
        uses: actions/download-artifact@v4
        with:
          path: ./all-packages
          
      - name: Synchronize artifacts into the 'repo' branch
        run: |
          # Clean previous content
          find . -mindepth 1 -not -path './.git*' -delete || true
          
          # Move all downloaded artifacts into the repository root, merging directories
          # We use a temporary folder to handle the nested structure of artifacts
          mkdir temp_merge
          mv ./all-packages/*/* temp_merge/
          rsync -av temp_merge/ .
          rm -rf ./all-packages temp_merge
          
      - name: Create a root index.html file
        run: |
          echo '<!DOCTYPE html><html><head><title>PeDitXOS Repository</title><style>body{font-family: sans-serif; padding: 2em;}</style></head><body>' > index.html
          echo '<h1>PeDitXOS Repository</h1>' >> index.html
          echo '<h2>Available OpenWrt Versions:</h2><ul>' >> index.html
          
          # Find version directories and create links
          for dir in $(find . -maxdepth 1 -type d -not -name '.*' -not -name '.' | sort); do
            version_name=$(basename "$dir")
            echo "<li><a href=\"$version_name/\">$version_name</a></li>" >> index.html
          done
          
          echo '</ul>' >> index.html
          
          # Find the first public key and copy it to root
          find . -name 'key-build.pub' -print -exec cp {} ./key-build.pub \; -quit
          
          echo '<h3>Public Signing Key: <a href="key-build.pub">key-build.pub</a></h3>' >> index.html
          echo '</body></html>' >> index.html
          
      - name: Push updates to 'repo' branch
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: .
          publish_branch: repo
          force_orphan: true
          cname: repo.peditxos.ir
          
      - name: Final Check
        run: echo "Deployment to 'repo' branch complete. Cloudflare Pages should now publish the files."

