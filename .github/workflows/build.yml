# Workflow to build and deploy OpenWrt packages for the PeDitXOS repository.
# This workflow uses a matrix strategy to build packages for multiple versions and architectures in parallel.

name: Build and Deploy PeDitXOS OpenWrt Packages

# Controls when the action will run.
on:
  # Allows manual run from the Actions tab
  workflow_dispatch:
  # Runs once a week to keep the repository fresh
  schedule:
    - cron: '0 0 * * 0' # Every Sunday at 00:00 UTC

jobs:
  # Job to build packages for multiple versions and targets in parallel
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # **CORRECTED OPENWRT VERSIONS**
        # These are the actual branch names used by the OpenWrt project on GitHub.
        openwrt_version:
          - 'master'           # Development branch (equivalent to latest Snapshot/Bleeding Edge)
          - 'openwrt-23.05'    # Latest Stable Branch
          - 'openwrt-22.03'    # Previous Stable Branch
          - 'openwrt-21.02'    # Older Stable Branch

        # A comprehensive list of 17 major OpenWrt targets.
        openwrt_target:
          - ath79/generic
          - bcm27xx/bcm2711
          - ipq40xx/generic
          - ipq806x/generic
          - ipq807x/generic
          - lantiq/xrx200
          - mediatek/filogic
          - mvebu/cortexa9
          - ramips/mt7621
          - rockchip/armv8
          - sunxi/cortexa7
          - x86/64
          - qualcommax/ipq5018
          - qualcommax/ipq6018
          - qualcommax/ipq8074
          - realtek/generic
          - mediatek/mt7622
        
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        
      - name: Clone OpenWrt source code
        # Now using the correctly named branch from the matrix
        run: git clone --depth 1 --branch ${{ matrix.openwrt_version }} https://github.com/openwrt/openwrt.git openwrt

      - name: Set up build environment and dependencies
        run: |
          # Install necessary tools for Python and general build process (fixes python3-distutils error)
          sudo apt-get update
          sudo apt-get install -y subversion libncurses5-dev gawk zlib1g-dev python3-dev python3-distutils unzip wget
          
          # Configure the target architecture
          cd openwrt
          echo "CONFIG_TARGET_${{ matrix.openwrt_target }}=y" > .config
          
          # Use a simple default config to ensure only packages are built
          cat >> .config << EOF
          # Configuration for building external packages only
          CONFIG_DOWNLOAD_FOLDER=/opt/dl
          CONFIG_DEVEL=y
          CONFIG_HAVE_DOT_CONFIG=y
          CONFIG_NO_M4=y
          CONFIG_NO_HASHED_VERSION=y
          CONFIG_TARGET_PREINIT_NO_MTD=y
          CONFIG_CLEAN_IPKG=y
          CONFIG_IPV6=y
          CONFIG_PACKAGE_zlib=y
          CONFIG_SIGNED_PACKAGES=y
          EOF

      - name: Add custom feeds
        run: |
          # Append your custom feeds to the default feeds configuration file
          echo 'src-git passwall_packages https://github.com/xiaorouji/openwrt-passwall-packages' >> openwrt/feeds.conf.default
          echo 'src-git passwall_peditx https://github.com/peditx/openwrt-passwall' >> openwrt/feeds.conf.default
          echo 'src-git passwall2_peditx https://github.com/peditx/openwrt-passwall2' >> openwrt/feeds.conf.default
          echo 'src-git themeswitch https://github.com/peditx/luci-app-themeswitch' >> openwrt/feeds.conf.default
          echo 'src-git theme_peditx https://github.com/peditx/luci-theme-peditx' >> openwrt/feeds.conf.default
          echo 'src-git theme_carbonpx https://github.com/peditx/luci-theme-carbonpx' >> openwrt/feeds.conf.default
          
          # Update and install all feeds
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
      - name: Decode usign private key
        # Decodes the Base64 private key from GitHub Secrets and prepares it for the build
        # This is essential for CONFIG_SIGNED_PACKAGES=y
        run: |
          echo "${{ secrets.USIGN_PRIVATE_KEY }}" | base64 -d > openwrt/signing_key.pem
          echo "CONFIG_SIGNATURE_KEY=\"signing_key.pem\"" >> openwrt/.config

      - name: Download source code and dependencies
        # Build system needs the minimum SDK environment to download sources.
        run: |
          cd openwrt
          make defconfig
          make download -j$(nproc)

      - name: Build external packages
        # Build all packages from custom feeds that are not already built-in.
        run: |
          cd openwrt
          make package/index V=s

      - name: Organize packages for deployment
        run: |
          # The output path structure is: <version>/<target_folder>/<subtarget_folder>/
          # Example: openwrt-23.05/x86/64/
          OUTPUT_PATH="${{ matrix.openwrt_version }}/${{ matrix.openwrt_target }}/"
          
          # Create the final directory structure
          mkdir -p ./${{ matrix.openwrt_version }}
          
          # Move the built packages to the final structured directory
          mv ./openwrt/bin/packages ./${{ matrix.openwrt_version }}/${{ matrix.openwrt_target }}
          
          # Copy the public signing key for users to download.
          # NOTE: 'key-build.pub' is generated automatically by the OpenWrt build system.
          cp ./openwrt/key-build.pub ./${{ matrix.openwrt_version }}/
          
      - name: Upload artifact for deployment
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.openwrt_version }}-${{ matrix.openwrt_target }}
          path: |
            ./${{ matrix.openwrt_version }}
            
  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the deployment branch (repo)
        uses: actions/checkout@v4
        with:
          ref: repo # Checkout the 'repo' branch
          fetch-depth: 0 # Fetch all history for proper git operations

      - name: Download all built packages
        uses: actions/download-artifact@v4
        with:
          path: ./all-packages
          
      - name: Synchronize artifacts into the 'repo' branch structure
        run: |
          # Remove previous content except for the .git folder
          find . -mindepth 1 -not -path './.git*' -delete || true
          
          # Move all downloaded packages into the repository root
          mv ./all-packages/* . || true
          rm -rf ./all-packages
          
      - name: Create a root index.html file
        run: |
          echo '<!DOCTYPE html><html><head><title>PeDitXOS Repository</title><style>body{font-family: sans-serif; padding: 2em;}</style></head><body>' > index.html
          echo '<h1>PeDitXOS Repository</h1>' >> index.html
          echo '<h2>Available OpenWrt Versions:</h2><ul>' >> index.html
          
          # Find all version directories (e.g., master, openwrt-23.05) and create links
          for dir in */; do
            # Also copy the public key to the root for easy access if it exists
            if [ -f "${dir}key-build.pub" ]; then
                cp "${dir}key-build.pub" "key-build.pub"
            fi
            version_name=${dir%/}
            # Check if directory is a version folder (by containing a '.' or being 'master')
            if [[ "$version_name" == *"."* || "$version_name" == "master" ]]; then
              echo "<li><a href=\"$version_name/\">$version_name</a></li>" >> index.html
            fi
          done
          echo '</ul>' >> index.html
          echo '<h3>Public Signing Key: <a href="key-build.pub">key-build.pub</a></h3>' >> index.html
          echo '</body></html>' >> index.html
          
      - name: Push updates to 'repo' branch
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: .
          publish_branch: repo
          force_orphan: true
          cname: repo.peditxos.ir
          
      - name: Final Check
        run: echo "Deployment to 'repo' branch complete. Cloudflare Pages should now publish the files."
